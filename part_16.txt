16장 독립성

🚩 유스케이스
시스템의 아키텍처는 시스템의 “의도”를 지원해야 한다는 뜻이다.
아키텍처와 아키텍트에서 유스케이스가 최우선이다.


🚩 배포
좋은 아키텍처라면 시스템이 빌드된 후 “즉각 배포”할 수 있도록 지원해야한다.
이러한 아키텍처를 만들려면 시스템을 컴포넌트 단위로 적절하게 분할하고 격리시켜야 한다.


🚩 계층 결합 분리
수평적 분리 - UI계층, 업무 로직 게층, 데이터베이스 계층

서로 다른 규칙들은 또는 서로 다른 세부사항들은 각자 다른 속도로, 다른 이유로 변경된다.
아키텍트는 이들을 서로 분리하고, 독립적으로 변경할 수 있도록 만들어야 한다.
시스템을 서로 결합되지 않는 “수평적인” 계층으로 분리 - UI, 애플리케이션 특화 업무 규칙, 애플리케이션 독립적 업무 규칙, 데이터베이스 등


🚩 유스케이스 결합 분리
수직적 분리 - 주문 추가 유스케이스, 주문 삭제 유스케이스

서로 다른 유스케이스는 각자 다른 속도로, 다른 이유로 변경된다.
유스케이스는 시스템의 수평적인 계층을 “수직적으로” 분할하고 기능의 일부를 사용하게 된다.
(UI의 일부, 애플리케이션 특화 업무 규칙의 일부, 애플리케이션 독립적 업무 규칙의 일부, 데이터베이스 기능의 일부)

결국 서로 다른 이유로 변경되는 요소들을 결합 분리하면, 기존 요소에 지장을 주지 않고도 새로운 유스케이스를 계속 추가할 수 있으며
새로운 유스케이스를 추가하더라도 기존 유스케이스에 영향을 주는 일은 거의 없을 것이다.


🚩 결합 분리 모드
분리된 컴포넌트를 서로 다른 서버에서 실행해야 하는 상황이라면, 이들 컴포넌트가 단일 프로세서의 동일한 주소 공간에 함꼐 상주하는 형태로 만들어져서는 안된다.
분리된 컴포넌트는 반드시 독립된 서비스가 있어야 한다.

이러한 컴포넌트를 ‘서비스’ 또는 ‘마이크로 서비스’라고하는데, 서비스에 기반한 아키텍쳐를 서비스 지향 아키텍쳐(SOA)라고 부른다.

핵심은 컴포넌트를 서비스 수준까지도 분리해야 한다는 것!


🚩 중복
진짜 중복: 제거해 나가야할 사항
우발적 중복: 중복으로 보이는 두 코드 영역이 각자의 경로로 발전하는 경우 (두 유스케이스의 화면 구조가 매우 비슷할 경우)
-> 해당 코드를 통합하지 않도록 유의!

1. 수직적 분리하는 경우
유스케이스를 통합하고 싶다는 유혹을 받게 될 것이다.
왜냐하면 이들 유스케이스가 서로 비슷한 화면구조, 비슷한 알고리즘, 그리고 비슷한 데이터베이스 쿼리와 스키마를 가지기 때문이다.
-> 우발적 중복이므로 해당 코드를 무조건 통합하지 않도록 유의!

2. 계층을 수평적 분리하는 경우
특정 데이터베이스 레코드의 데이터 구조가 특정 화면의 구조와 상당히 비슷하다는 점을 발견할 수도 있다.
우발적 중복이므로
-> 데이터베이스 레코드를 있는 그대로 UI까지 전달하면 안되고, 데이터베이스 레코드와 동일한 형태의 뷰 모델을 만들어서 각 항목을 복사해야한다.

 
🚩 결합 분리 모드 방법
1. 소스 수준 분리 모드 (모노리틱 구조)
2. 배포 수준 분리 모드
3. 서비스 수준 분리 모드

결합 분리 모드를 선택사항으로 남겨두어서 배포 규모에 따라 가장 적합한 모드를 선택해 사용하는 것이 가장 좋다!

