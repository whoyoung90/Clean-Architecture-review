15장 아키텍처란?

소프트웨어 아키텍트의 정의
프로그래머이다!
코드와 동떨어져서는 안되며, 앞으로도 계속 프로그래머로 남는다.
프로그래밍 작업을 계속하는 이유는, 발생하는 문제를 경험해보지 않는다면 다른 프로그래머를 지원하는 작업을 제대로 수행할 수 없기 때문


공감했던 부분
시스템 아키텍쳐는 시스템의 “동작 여부”와는 거의 관련이 없다.
형편없는 아키텍처를 갖춘 시스템도 대체로 운영에서는 문제를 겪지 않는다.
운영보다는 배포, 유지보수, 계속되는 개발과정에서 어려움을 겪는다.


아키텍처의 주된 목적은 시스템의 “생명주기”를 지원하는 것이다.
(쉽게 이해, 쉽게 개발, 쉽게 유지보수, 쉽게 배포)
시스템의 수명과 관련된 비용은 최소화, 프로그래머의 생산성을 최대화


🚩개발
팀구조에 따라 아키텍쳐 관련 결정에서 차이가 난다.


🚩배포
배포비용이 높을수록 시스템의 유용성은 떨어진다.
소프트웨어 아키텍쳐는 시스템을 단 한번에 쉽게 배포할 수 있도록 목표을 두어야 핟다.
안타깝지만 초기 개발단계에서는 배포전략을 거의 고려하지 않는다는.


🚩운영
아키텍쳐가 운영에 미치는 영향은 개발, 배포, 유지보수에 미치는 영향보다는 적다
좋은 소프트웨어 아키텍쳐는 시스템을 운영하는데 “필요한 요구”도 알려준다.(=시스템의 운영방식을 잘 드러내준다)


🚩유지보수
소프트웨어 시스템에서 비용이 가장 많이 든다.
가장 큰 비용은 탐사(spelunking)와 이로 인한 위험부담.


🚩선택사항 열어 두기
“좋은 아키텍트는 결정되지 않은 사항의 수를 최대화한다.”
“세부사항에 대한 결정을 가능한 한 오랫동안 연기하거나 변경할 수 있는 형태로 시스템을 만든다.”

세부사항(detail)이란? 데이터베이스, 웹서버, 통신프로토콜, 프레임워크 등
이러한 세부사항에 대한 결정을 더 오랫동안 열어둘 수 있다면
더많은 실험을 해볼 수 있고 더 많은 것을 시도할 수 있기 때문이다. 

결국 이를 기초로 제대로 된 결정을 내릴 수 있고, 향후 시스템에 변경이 필요할 때 어떤 방향으로든 쉽게 변경할 수 있도록 한다!


🚩결론
좋은 아키텍트는 세부사항을 정책으로부터 신중히 가려내고, 정책이 세부사항과 결합되지 않도록 엄격하게 분리한다.
이를 통해 정책은 세부사항에 의존하지 않게 된다.
좋은 아키텍트는 세부사항에 대한 결정을 가능한 한 오랫동안 미룰 수 있는 방향으로 정책을 설게한다.